# -*- coding: utf-8 -*-
"""영화_콘텐츠 기반 알고리즘.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rgQik7M58QpqCX9gIa0ltshZrWVSCOth
"""

import pandas as pd
import numpy as np

movies = pd.read_csv('/content/drive/MyDrive/DATA/tmdb_5000_movies.csv')
print(movies.shape)

movies.head()

movies_df = movies[['id', 'title', 'genres', 'vote_average', 'vote_count', 'popularity', 'keywords', 'overview']]
movies_df.head()

from ast import literal_eval

code = """(1,2,{'foo':'bar'})"""
code

type(code)

literal_eval(code)
type(literal_eval(code))

movies_df['genres'] = movies_df['genres'].apply(literal_eval)
movies_df['keywords'] = movies_df['keywords'].apply(literal_eval)
movies_df.head()

movies_df['genres'][0]

movies_df['genres'] = movies_df['genres'].apply(lambda x :[y['name']for y in x])
movies_df['keywords'] = movies_df['keywords'].apply(lambda x :[y['name']for y in x])
movies_df[['genres', 'keywords']][:2]

movies_df['genres_literal'] = movies_df['genres'].apply(lambda x: ('').join(x))
movies_df.head()

from sklearn.feature_extraction.text import CountVectorizer

count_vect = CountVectorizer(min_df=0, ngram_range=(1,2))
genre_mat = count_vect.fit_transform(movies_df['genres_literal'])
print(genre_mat.shape)

from sklearn.metrics.pairwise import cosine_similarity

genre_sim = cosine_similarity(genre_mat, genre_mat)
print(genre_sim.shape)
print(genre_sim[:2])

genre_sim_sorted_ind = genre_sim.argsort()[:,::-1]
print(genre_sim_sorted_ind[:1])

def find_sim_movie(df,sorted_ind, title_name, top_n=10):
  title_movie = df[df['title']==title_name]
  title_index = title_movie.index.values
  similar_indexs = sorted_ind[title_index, :(top_n)]

  print(similar_indexs)
  similar_indexs = similar_indexs.reshape(-1)

  return df.iloc[similar_indexs]

similar_movies = find_sim_movie(movies_df, genre_sim_sorted_ind, 'The Godfather', 10)
similar_movies[['title', 'vote_average']]

movies_df[['title', 'vote_average', 'vote_count']].sort_values('vote_average', ascending=False)[:10]

c = movies_df['vote_average'].mean()
m = movies_df['vote_count'].quantile(0.6)
print('c : ',round(c,3), 'm : ', round(m,3))

def weighted_vote_average(record):
  v = record['vote_count']
  r = record['vote_average']

  return ((v/(v+m)) * r) + ((m/(m+v)) * c)

movies_df['weighted_vote'] = movies_df.apply(weighted_vote_average, axis=1)
movies_df.head()

movies_df[['title', 'vote_average', 'weighted_vote', 'vote_count']].sort_values('weighted_vote', ascending=False)[:10]

def find_sim_movie(df,sorted_ind, title_name, top_n=10):
  title_movie = df[df['title'] == title_name]
  title_index = title_movie.index.values

  similar_indexs = sorted_ind[title_index, :(top_n*2)]
  similar_indexs = similar_indexs.reshape(-1)

  similar_indexs = similar_indexs[similar_indexs != title_index]

  return df.iloc[similar_indexs].sort_values('weighted_vote', ascending=False)[:top_n]

similar_movies = find_sim_movie(movies_df,genre_sim_sorted_ind,'The Godfather',10)
similar_movies[['title','vote_average','weighted_vote']]

